מצוין 🔥
הנה **תכנית פעולה מפורטת** לשדרוג הדשבורד לדשבורד חי ודינמי, שבו תוכל לשוחח עם הבינה המלאכותית ולראות החלטות בזמן אמת:

---

## ✅ שלב 1: החלפת agent סטטי ב-backend חי

### 🧠 יצירת Agent Class אמיתי

* קובץ: `agent/phoenix_agent.py`
* תכונות:

  * קורא לוגים מ-`decisions/`, `monitor/`, `risk/`
  * משתמש ב-context מהפורטפוליו הנוכחי (`live/`)
  * מנקה מידע, מסביר אותו (SHAP או לוגיקה ידנית), ויודע להגיב בשפה טבעית

### דוגמה ל-API:

```python
@app.post("/agent/ask")
def agent_ask(query: str):
    response = agent.process(query)
    return {"response": response}
```

---

## ✅ שלב 2: חיבור UI ↔ Agent

### UI (React/Vite):

* `src/components/AgentChat.tsx` – קומפוננטה עם input ושיחה מתמשכת
* `src/hooks/useAgentChat.ts` – קריאה ל-API `/agent/ask`
* שימוש ב-loading state ו-context מסביב (תשובה, גרפים, הסברים)

### Backend (FastAPI):

* מוסיף route ל-agent
* מאפשר קריאה עם context שכולל: date, market state, portfolio PnL

---

## ✅ שלב 3: תיעוד והסבר פעולות הבינה

### הפלט של הסוכן כולל:

* ❓ שאלה שנשאלה
* 📈 מידע שנשלף (מדדים, החלטות, ביצועים)
* 💡 הסבר: "בחרתי באסטרטגיה X כי הרווח הנוכחי Z והמודל העדיף Y על בסיס SHAP"

---

## ✅ שלב 4: אינטגרציה עם החלטות בפועל

* הסוכן קורא מה-`decisions/*.md` ו-`log.py`
* יכול לומר:

  > "ביצעתי קנייה של AAPL כי הדירוג של המודל עלה מ-0.65 ל-0.92, והייתה ירידה ברמת הסיכון לפי מודול ה-Kelly."

---

## 🧪 בדיקות

* לבדוק ש-agent תמיד עונה (fallback)
* לבדוק שהcontext מעודכן (PnL, תאריך)
* לבדוק UI חי עם input + תשובות + לוגים

---

רוצה שאעבור לבנות Branch עם PR ראשון שמתחיל מ-`phoenix_agent.py` + API `/agent/ask` וקומפוננטת chat בסיסית ב-UI?
